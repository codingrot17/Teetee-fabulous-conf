function adminDashboard() {
            return {
                currentUser: null,
                authError: false,
                sidebarOpen: window.innerWidth > 768,
                activeSection: 'dashboard',
                loading: true,
                serviceError: false,
                serviceErrorMessage: '',
                dynamicContent: '',
                servicesReady: false,
                stats: {
                    products: 0,
                    categories: 0,
                    revenue: 250000,
                    customers: 0
                },
                recentActivity: [
                    { id: 1, type: 'product', icon: 'fas fa-check', text: 'Dashboard initialized successfully', time: 'Just now' },
                    { id: 2, type: 'content', icon: 'fas fa-user', text: 'Admin user authenticated', time: 'Just now' },
                    { id: 3, type: 'order', icon: 'fas fa-database', text: 'Connected to Appwrite database', time: '1 minute ago' }
                ],
                
                sectionFiles: {
                    'products': 'components/products.html',
                    'orders': 'components/orders.html',
                    'customers': 'components/customers.html',
                    'content': 'components/content.html',
                    'media': 'components/media.html',
                    'categories': 'components/categories.html',
                    'settings': 'components/settings.html',
                    'analytics': 'components/analytics.html'
                },
                
                async init() {
                    console.log('Dashboard initialized');
                    
                    // Listen for authentication events
                    window.addEventListener('appwrite-ready', async (event) => {
                        this.currentUser = event.detail.user;
                        this.servicesReady = true;
                        await this.loadDashboardData();
                    });
                    
                    window.addEventListener('appwrite-error', (event) => {
                        this.serviceError = true;
                        this.serviceErrorMessage = event.detail.error;
                        this.loading = false;
                    });
                    
                    // Check if services are already ready
                    if (window.dbService && window.authService) {
                        const authState = await window.authService.checkAuthState();
                        if (authState.authenticated) {
                            this.currentUser = authState.user;
                            this.servicesReady = true;
                            await this.loadDashboardData();
                        } else {
                            this.authError = true;
                            this.loading = false;
                        }
                    }
                    
                    this.initializeFromState();
                    window.addEventListener('hashchange', () => this.handleHashChange());
                    window.addEventListener('resize', () => {
                        this.sidebarOpen = window.innerWidth > 768;
                    });
                },
                
                async loadDashboardData() {
                    this.loading = true;
                    this.serviceError = false;
                    
                    try {
                        // Load basic stats
                        const [productsResult, categoriesResult] = await Promise.all([
                            window.dbService.getProducts({ limit: 100 }),
                            window.dbService.getCategories()
                        ]);
                        
                        this.stats.products = productsResult.total || 0;
                        this.stats.categories = categoriesResult.total || 0;
                        
                        console.log('Dashboard data loaded:', this.stats);
                        
                    } catch (error) {
                        console.error('Error loading dashboard data:', error);
                        this.serviceError = true;
                        this.serviceErrorMessage = `Failed to load dashboard data: ${error.message}`;
                    } finally {
                        this.loading = false;
                    }
                },
                
                async retryServiceConnection() {
                    this.loading = true;
                    this.serviceError = false;
                    
                    try {
                        if (window.dbService && window.authService) {
                            const authState = await window.authService.checkAuthState();
                            if (authState.authenticated) {
                                this.currentUser = authState.user;
                                await this.loadDashboardData();
                            } else {
                                this.authError = true;
                                this.loading = false;
                            }
                        } else {
                            throw new Error('Services still not available');
                        }
                    } catch (error) {
                        this.serviceError = true;
                        this.serviceErrorMessage = 'Connection retry failed. Please refresh the page.';
                        this.loading = false;
                    }
                },
                
                goToLogin() {
                    window.location.href = 'login.html';
                },
                
                initializeFromState() {
                    let initialSection = window.location.hash.substring(1);
                    if (!initialSection) {
                        initialSection = localStorage.getItem('dashboardActiveSection') || 'dashboard';
                    }
                    const validSections = ['dashboard','products','orders','customers','content','media','categories','settings','analytics'];
                    if (validSections.includes(initialSection)) {
                        this.setActiveSection(initialSection, false);
                    }
                },
                
                handleHashChange() {
                    const section = window.location.hash.substring(1);
                    if (section && section !== this.activeSection) {
                        this.setActiveSection(section, false);
                    }
                },
                
                toggleSidebar() {
                    this.sidebarOpen = !this.sidebarOpen;
                },
                
                async setActiveSection(section, updateUrl = true) {
                    if (!this.servicesReady && section !== 'dashboard') {
                        alert('Services are not yet ready. Please wait or refresh the page.');
                        return;
                    }
                    
                    this.activeSection = section;
                    if (updateUrl) {
                        window.location.hash = section === 'dashboard' ? '' : section;
                    }
                    localStorage.setItem('dashboardActiveSection', section);
                    if (window.innerWidth <= 768) {
                        this.sidebarOpen = false;
                    }
                    if (section !== 'dashboard') {
                        await this.loadSectionContent(section);
                    }
                },
                
                async loadSectionContent(section) {
                    this.loading = true;
                    this.dynamicContent = '';
                    try {
                        const filePath = this.sectionFiles[section];
                        if (filePath) {
                            const response = await fetch(filePath);
                            if (response.ok) {
                                const content = await response.text();
                                this.dynamicContent = content;
                                this.$nextTick(() => {
                                    const container = document.querySelector('[x-html="dynamicContent"]');
                                    if (container && container.firstElementChild) {
                                        Alpine.initTree(container.firstElementChild);
                                    }
                                });
                            } else {
                                this.dynamicContent = this.getPlaceholderContent(section);
                            }
                        } else {
                            this.dynamicContent = this.getPlaceholderContent(section);
                        }
                    } catch (error) {
                        console.error('Error loading content:', error);
                        this.dynamicContent = this.getPlaceholderContent(section);
                    } finally {
                        this.loading = false;
                    }
                },
                
                getPlaceholderContent(section) {
                    return `
                        <div style="text-align: center; padding: 60px 20px;">
                            <div style="font-size: 48px; margin-bottom: 20px;">ðŸš§</div>
                            <h2 style="font-size: 24px; margin-bottom: 12px; color: #374151;">${this.getPageTitle(section)}</h2>
                            <p style="color: #6b7280;">This section is under development. Coming soon!</p>
                        </div>
                    `;
                },
                
                getPageTitle(section = null) {
                    const currentSection = section || this.activeSection;
                    const titles = {
                        dashboard: 'Dashboard',
                        products: 'Products Management',
                        orders: 'Orders Management',
                        customers: 'Customers',
                        content: 'Site Content',
                        media: 'Media Library',
                        categories: 'Categories',
                        settings: 'Settings',
                        analytics: 'Analytics'
                    };
                    return titles[currentSection] || 'Dashboard';
                },
                
                async handleLogout() {
                    try {
                        if (window.authService) {
                            await window.authService.logout();
                        }
                        localStorage.removeItem('dashboardActiveSection');
                        window.location.href = 'login.html';
                    } catch (error) {
                        console.error('Logout error:', error);
                        // Force redirect even if logout fails
                        window.location.href = 'login.html';
                    }
                }
            }
        }
        
        // Make adminDashboard available globally for debugging
        window.adminDashboard = adminDashboard;
        
        function ordersComponent() {
  return {
    orders: [],
    filteredOrders: [],
    loading: true,
    searchQuery: '',
    selectedStatus: '',
    selectedService: '',
    sortBy: 'newest',
    viewMode: 'table',
    page: 1,
    perPage: 10,
    editingOrder: null,
    showEditModal: false,

    // Computed
    get totalPages() { return Math.ceil(this.filteredOrders.length / this.perPage) || 1 },
    get startIndex() { return (this.page - 1) * this.perPage },
    get endIndex() { return this.startIndex + this.perPage },
    get paginatedOrders() { return this.filteredOrders.slice(this.startIndex, this.endIndex) },

    async init() { this.loadOrders(); },

    async loadOrders() {
      try {
        this.loading = true;
        const res = await window.dbService?.getOrders();
        this.orders = res?.documents || [];
        this.orders = this.orders.map(o => ({
          ...o,
          status: o.status || 'pending',
          notes: o.notes || ''
        }));
        this.applyFilters();
      } catch (err) {
        console.error('Failed to load orders:', err);
        this.showNotification('Failed to load orders','error');
      } finally { this.loading = false; }
    },

    applyFilters() {
      let list = [...this.orders];
      if (this.searchQuery) {
        const q = this.searchQuery.toLowerCase();
        list = list.filter(o =>
          (o.customer_name && o.customer_name.toLowerCase().includes(q)) ||
          (o.customer_email && o.customer_email.toLowerCase().includes(q)) ||
          (o.customer_phone && o.customer_phone.toLowerCase().includes(q)) ||
          (o.message && o.message.toLowerCase().includes(q))
        );
      }
      if (this.selectedStatus) list = list.filter(o => o.status === this.selectedStatus);
      if (this.selectedService) list = list.filter(o => o.service_type === this.selectedService);

      switch(this.sortBy) {
        case 'newest': list.sort((a,b)=> new Date(b.$createdAt)-new Date(a.$createdAt)); break;
        case 'oldest': list.sort((a,b)=> new Date(a.$createdAt)-new Date(b.$createdAt)); break;
        case 'name': list.sort((a,b)=> (a.customer_name||'').localeCompare(b.customer_name||'')); break;
      }
      this.filteredOrders = list;
      if (this.page > this.totalPages) this.page = 1;
    },

    clearFilters() {
      this.searchQuery=''; 
      this.selectedStatus=''; 
      this.selectedService=''; 
      this.sortBy='newest';
      this.applyFilters();
    },

    formatDate(dateStr) {
      try {
        return new Date(dateStr).toLocaleString('en-GB',{
          day:'numeric',month:'short',year:'numeric',
          hour:'2-digit',minute:'2-digit'
        });
      } catch(e){ return dateStr||'' }
    },

    formatService(s) {
      if (!s) return '';
      const map = {
        'cake-order':'Cake Order',
        'custom-design':'Custom Design',
        'bulk-order':'Bulk Order',
        'consultation':'Consultation',
        'other':'Other'
      };
      return map[s]||s;
    },

    async changeStatus(order) {
      try {
        await window.dbService?.updateOrder(order.$id,{status:order.status,notes:order.notes||''});
        this.showNotification('Order status updated','success');
        await this.loadOrders();
      } catch(err){ this.showNotification('Failed to update order','error'); }
    },

    openEdit(order){ this.editingOrder=JSON.parse(JSON.stringify(order)); this.showEditModal=true; },
    closeEdit(){ this.editingOrder=null; this.showEditModal=false; },

    async saveEdit() {
      if (!this.editingOrder?.$id) return;
      try {
        await window.dbService?.updateOrder(this.editingOrder.$id,{
          status:this.editingOrder.status||'pending',
          notes:this.editingOrder.notes||''
        });
        this.showNotification('Order updated successfully','success');
        this.closeEdit(); await this.loadOrders();
      } catch(err){ this.showNotification('Failed to save changes','error'); }
    },

    openMessageInNewTab(order) {
      const content = [
        'Customer: '+(order.customer_name||''),
        'Email: '+(order.customer_email||''),
        'Phone: '+(order.customer_phone||''),
        'Service: '+this.formatService(order.service_type)||'',
        'Status: '+(order.status||''),
        'Notes: '+(order.notes||''),
        '',
        'Message:',
        order.message||''
      ].join('\n');
      const w=window.open('','_blank'); 
      if(w){ 
        const pre=w.document.createElement('pre'); 
        pre.style.whiteSpace='pre-wrap'; 
        pre.style.padding='20px'; 
        pre.textContent=content; 
        w.document.body.appendChild(pre); 
      }
    },

    exportCsv() {
      const rows=[['Customer','Email','Phone','Service','Status','Notes','Message','Date'],
        ...this.filteredOrders.map(o=>[
          o.customer_name||'',
          o.customer_email||'',
          o.customer_phone||'',
          this.formatService(o.service_type)||'',
          o.status||'',
          o.notes||'',
          (o.message||'').replace(/\n/g,' '),
          this.formatDate(o.$createdAt)||''
        ])
      ];
      const csv=rows.map(r=>r.map(v=>`"${String(v).replace(/"/g,'""')}"`).join(',')).join('\n');
      const blob=new Blob([csv],{type:'text/csv;charset=utf-8;'});
      const link=document.createElement('a');
      link.href=URL.createObjectURL(blob);
      link.download='orders.csv';
      link.click();
    },

    showNotification(msg, type='info') {
      const toast=document.createElement('div');
      toast.className=`toast toast-${type}`;
      toast.innerHTML=`
        <i class='fas ${type==='success'?'fa-check-circle':type==='error'?'fa-exclamation-circle':'fa-info-circle'}'></i>
        <span>${msg}</span>
        <button class='toast-close' onclick='this.parentElement.remove()'>
          <i class='fas fa-times'></i>
        </button>
      `;
      document.body.appendChild(toast);
      setTimeout(()=>toast.remove(),5000);
    }
  }
}
window.ordersComponent = ordersComponent;
